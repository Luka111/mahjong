var Timeout = require('herstimeout');
var errors = {
  'OK':{message:'Everything is OK',params:[]},
  'NO_BUYIN':{message:'You have no buyin open!',params:[]},
  'NO_BALANCE':{message:'You have no balance!',params:[]},
  'NO_MONEY':{message:'Not enough money!',params:[]},
  'BET_ERROR':{message:'Your bet has no sense!',params:[]},
  'INVALID_CODE':{message:'Invalid decision code',params:[]},
  'ACCESS_DENIED':{message:'Access denied.',params:[]}
}

//var tiles = require('tiles');

function _not_empty(){
  return this.self.name;
};

function _got_money(){
  return this.data.element(['balance']).value();
}

function _get_outflag(){
  return this.data.element(['outflag']).value();
}

function _activate_outflag(){
  this.data.commit('activate_outflag',[
    ['set',['outflag'],[1,undefined,this.self.key]]
  ]);
  return;
}

function _disable_outflag(){
  this.data.commit('disable_outflag',[
    ['set',['outflag'],[0,undefined,this.self.key]]
  ]);
  return;
}

function _reset_my_bet(){
  this.data.commit('remove_bet',[
    ['remove',['bet']]
  ]);
  this.data.commit('undefined_bet',[
    ['set',['bet'],[undefined]]
  ]);
}

function _start(username,realmname){
  var key = this.self.room.self.name+':'+username+'@'+realmname;
  this.self.key = key;
  this.self.room.consumeritf.setKey(username,realmname,key);
  this.self.name = username;
  this.self.realmname = realmname;
  //buyin, put in this.self.room.data with commit
  this.data.commit('do_buyin',[
    ['set',['buyin'],key],
    ['set',['buyin','timeout'],[10,undefined,key]],
    ['set',['outflag'],[0,undefined,key]],
    ['set',['name'],[username]]
  ]);
  var doTimeout = (function(_t){
    console.log('USO U TAJM');
    var t=_t,data=t.data,key=t.key;
    var worker = function(){
      var biel = data.element(['buyin']);
      if(!biel){
        return;
      }
      var toval = biel.element(['timeout']).value();
      console.log('TIME LEFT---',toval);
      if(toval){
        console.log('KUCAM DALJE');
        data.commit('timeout_changes',[
          ['set',['buyin','timeout'],[toval-1,undefined,key]]
        ]);
        Timeout.set(worker,1000);
      }else{
        console.log('NAPOLJE');
        init.call(t);
      }
    };
    return worker;
  })(this);
  console.log('I SAD OPET');
  doTimeout();
};

function _doBuyIn(amount){
  //probna, kasnije idemo sa predefinisanim buyin-ovima
  console.log('Player wants to buyin! Amount:',amount);
  var bet = parseInt(amount/10);
  console.log('Default bet: ',bet);
  var doBIactions = [
    ['set',['balance'],[amount]],
    ['remove',['buyin']]
  ];
  this.data.commit('did_buyin',doBIactions);
  console.log('Welcome to room!','Your balance is',amount);
}

function _iWantOut(username){
  console.log(username,'has left the room');
  init.call(this);
}

function init(){
  //resetuj name,key,balance..
  this.self.name = undefined;
  console.log('initing player');
  this.data.commit('player_init',[
    ['set',['balance'],[0]],
    ['set',['name'],['']],
    ['set',['outflag'],[0]],
    ['remove',['buyin']],
    ['set',['activeHand'],[0]],
    ['set',['bet'],[0]]
  ]);
};

module.exports = {
  errors:errors,
  init:init,
  _not_empty:_not_empty,
  _got_money:_got_money,
  _start:_start,
  _doBuyIn:_doBuyIn,
  _iWantOut:_iWantOut,
  _get_outflag:_get_outflag,
  _activate_outflag:_activate_outflag,
  _disable_outflag:_disable_outflag,
  _reset_my_bet:_reset_my_bet,
  requirements : {
    giveMeCard : function(){
      console.log('Got new deck!');
    }
  }
};


