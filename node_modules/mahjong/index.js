var MAHJONGKAPACITY = 4;
var IdleState = require('./StateMachine');

var errors = {
  'OK' : {message:'Everything is ok',params:[]},
  'ANONYMOUS_ACCESS':{message:'Access violation'},
  'ROOMFULL':{message:'No empty seats'},
  'INVALID_SEAT':{message:'That seat does not exists'},
  'INVALID_BET':{message:'Invalid bet'},
  'PLAYER_IN_ROOM':{message:'You are already in the room!'},
  'NO_PLAYER':{message:'Player is not in the room'},
  'NO_BUYIN':{message:'You have no buyin open!'},
  'NO_BALANCE':{message:'You have no balance!'},
  'NO_MONEY':{message:'Not enough money!'},
  'BET_ERROR':{message:'Your bet has no sense!'},
  'INVALID_FUNCTION_CALL':{message:'You cannot call that function!'}
}

function letMeIn(seat,statuscb,username,realmname){
  if(seat<0||seat>=MAHJONGKAPACITY){
    statuscb('INVALID_SEAT');
  }
  this.self.state.letPlayerIn(seat,statuscb,username,realmname);
};

letMeIn.params = ['seat'];

function doBuyIn(amount,statuscb,username,realmname){
  console.log('Got doBuyIn REQUEST by',username,'Amount:',amount);
  if(amount<=0){
    statuscb('NO_MONEY');
  }
  this.self.state.playerBuysIn(amount,statuscb,username,realmname);
}
doBuyIn.params = ['amount'];

function makeBet(amount,statuscb,username,realmname){
  console.log('Got makeBet REQUEST by',username,'Amount:',amount);
  this.self.state.makeBet(amount,statuscb,username,realmname);
}
makeBet.params = ['amount'];

function iWantOut(statuscb,username,realmname){
  this.self.state.iWantOut(statuscb,username,realmname);
}

function iWantToStay(statuscb,username,realmname){
  this.self.state.iWantToStay(statuscb,username,realmname);
}

function init(){
  console.log('MAHJONG IS ALIVE!');
  console.log('Capacity: ',MAHJONGKAPACITY);
  var data = this.data;
  var initactions = [
    ['set',['playercount'],[0]],
    ['set',['players'],this.self.name],
    ['set',['mahjongCap'],[MAHJONGKAPACITY]]
  ];
  for (var i=0; i<MAHJONGKAPACITY; i++){
    initactions.push(['set',['players',i]]);
  }
  data.commit('init',initactions);
  this.self.playerfunctionalities = [];
  for(var i = 0; i<MAHJONGKAPACITY; i++){
    this.self.playerfunctionalities.push(data.element(['players',i]).attach(__dirname+'/player',{room:this},undefined,{
      giveMeCard : (function(_t){
        var t = _t;
        return function(){
          return (t.deck.splice(0,1))[0].string;
        }
      })(this)
    },this.consumeritf));
  }
  this.self.state = new IdleState(this);
}

module.exports = {
  errors : errors,
  letMeIn : letMeIn,
  doBuyIn : doBuyIn,
  init : init,
  iWantOut : iWantOut,
  makeBet : makeBet,
  requirements : {
    newHandId : function(){
      return 1;
    }
  }
};
